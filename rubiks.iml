[@@@redef true];;

type face =
  | F
  | B
  | U
  | D
  | L
  | R

let pp_face fmt = function
  | F -> CCFormat.fprintf fmt "F"
  | B -> CCFormat.fprintf fmt "B"
  | U -> CCFormat.fprintf fmt "U"
  | D -> CCFormat.fprintf fmt "D"
  | L -> CCFormat.fprintf fmt "L"
  | R -> CCFormat.fprintf fmt "R"
[@@program];;

type color =
  | White
  | Red
  | Blue
  | Orange
  | Green
  | Yellow

let pp_color fmt = function
  | White -> CCFormat.fprintf fmt "@{<white>■@}"
  | Red -> CCFormat.fprintf fmt "@{<red>■@}"
  | Blue -> CCFormat.fprintf fmt "@{<blue>■@}"
  | Orange -> CCFormat.fprintf fmt "@{<magenta>■@}"
  | Green -> CCFormat.fprintf fmt "@{<green>■@}"
  | Yellow -> CCFormat.fprintf fmt "@{<yellow>■@}"
[@@program];;

[@@@install_printer pp_color];;

let () = CCFormat.set_color_default true

type coord = (face * int * int)

type cube = (coord, color) Map.t

let pp_cube fmt cube =
  CCFormat.(
    fprintf fmt
      "@.@[<v>\
         @[      %a %a %a@]@,\
         @[        %a %a@]@,\
         @[%a %a %a %a %a %a %a %a %a %a %a %a@]@,\
         @[  %a %a   %a %a   %a %a   %a %a@]@,\
         @[      %a %a %a@]@,\
         @[        %a %a@]@,\
       @]"
      pp_face U
      pp_color (Map.get (U, 0, 0) cube)
      pp_color (Map.get (U, 0, 1) cube)
      pp_color (Map.get (U, 1, 0) cube)
      pp_color (Map.get (U, 1, 1) cube)

      pp_face L
      pp_color (Map.get (L, 0, 0) cube)
      pp_color (Map.get (L, 0, 1) cube)
      pp_face F
      pp_color (Map.get (F, 0, 0) cube)
      pp_color (Map.get (F, 0, 1) cube)
      pp_face R
      pp_color (Map.get (R, 0, 0) cube)
      pp_color (Map.get (R, 0, 1) cube)
      pp_face B
      pp_color (Map.get (B, 0, 0) cube)
      pp_color (Map.get (B, 0, 1) cube)

      pp_color (Map.get (L, 1, 0) cube)
      pp_color (Map.get (L, 1, 1) cube)
      pp_color (Map.get (F, 1, 0) cube)
      pp_color (Map.get (F, 1, 1) cube)
      pp_color (Map.get (R, 1, 0) cube)
      pp_color (Map.get (R, 1, 1) cube)
      pp_color (Map.get (B, 1, 0) cube)
      pp_color (Map.get (B, 1, 1) cube)

      pp_face D
      pp_color (Map.get (D, 0, 0) cube)
      pp_color (Map.get (D, 0, 1) cube)
      pp_color (Map.get (D, 1, 0) cube)
      pp_color (Map.get (D, 1, 1) cube)
  )
[@@program];;

[@@@install_printer pp_cube];;

let colors_of_face face cube =
  [ Map.get (face, 0,  0) cube
  ; Map.get (face, 0,  1) cube
  ; Map.get (face, 1,  0) cube
  ; Map.get (face, 1,  1) cube
  ]

let solved cube =
  cube
  |> colors_of_face L
  |> List.for_all (fun color -> color = Green) &&
  cube
  |> colors_of_face F
  |> List.for_all (fun color -> color = Red) &&
  cube
  |> colors_of_face R
  |> List.for_all (fun color -> color = Blue) &&
  cube
  |> colors_of_face B
  |> List.for_all (fun color -> color = Orange) &&
  cube
  |> colors_of_face U
  |> List.for_all (fun color -> color = White) &&
  cube
  |> colors_of_face D
  |> List.for_all (fun color -> color = Yellow)
;;

instance (fun cube -> solved cube);;
CX.cube;;

let rotate face cube =
  match face with
  | L ->
    cube
    |> Map.add (L, 0, 0) (Map.get (L, 0, 1) cube)
    |> Map.add (L, 1, 0) (Map.get (L, 0, 0) cube)
    |> Map.add (L, 1, 1) (Map.get (L, 1, 0) cube)
    |> Map.add (L, 0, 1) (Map.get (L, 1, 1) cube)
    |> Map.add (F, 0, 0) (Map.get (U, 0, 0) cube)
    |> Map.add (F, 0, 1) (Map.get (U, 0, 1) cube)
    |> Map.add (U, 0, 0) (Map.get (B, 1, 1) cube)
    |> Map.add (U, 0, 1) (Map.get (B, 1, 0) cube)
    |> Map.add (B, 1, 0) (Map.get (D, 0, 1) cube)
    |> Map.add (B, 1, 1) (Map.get (D, 0, 0) cube)
    |> Map.add (D, 0, 0) (Map.get (F, 0, 0) cube)
    |> Map.add (D, 0, 1) (Map.get (F, 0, 1) cube)
  | F ->
    cube
    |> Map.add (F, 0, 0) (Map.get (F, 0, 1) cube)
    |> Map.add (F, 1, 0) (Map.get (F, 0, 0) cube)
    |> Map.add (F, 1, 1) (Map.get (F, 1, 0) cube)
    |> Map.add (F, 0, 1) (Map.get (F, 1, 1) cube)
    |> Map.add (U, 0, 1) (Map.get (L, 1, 1) cube)
    |> Map.add (U, 1, 1) (Map.get (L, 1, 0) cube)
    |> Map.add (R, 0, 0) (Map.get (U, 0, 1) cube)
    |> Map.add (R, 0, 1) (Map.get (U, 1, 1) cube)
    |> Map.add (D, 0, 0) (Map.get (R, 0, 1) cube)
    |> Map.add (D, 1, 0) (Map.get (R, 0, 0) cube)
    |> Map.add (L, 1, 0) (Map.get (D, 0, 0) cube)
    |> Map.add (L, 1, 1) (Map.get (D, 1, 0) cube)
  | R ->
    cube
    |> Map.add (R, 0, 0) (Map.get (R, 0, 1) cube)
    |> Map.add (R, 1, 0) (Map.get (R, 0, 0) cube)
    |> Map.add (R, 1, 1) (Map.get (R, 1, 0) cube)
    |> Map.add (R, 0, 1) (Map.get (R, 1, 1) cube)
    |> Map.add (F, 1, 0) (Map.get (D, 1, 0) cube)
    |> Map.add (F, 1, 1) (Map.get (D, 1, 1) cube)
    |> Map.add (U, 1, 0) (Map.get (F, 1, 0) cube)
    |> Map.add (U, 1, 1) (Map.get (F, 1, 1) cube)
    |> Map.add (D, 1, 0) (Map.get (B, 0, 0) cube)
    |> Map.add (D, 1, 1) (Map.get (B, 0, 1) cube)
    |> Map.add (B, 0, 0) (Map.get (U, 1, 0) cube)
    |> Map.add (B, 0, 1) (Map.get (U, 1, 1) cube)
  | B ->
    cube
    |> Map.add (B, 0, 0) (Map.get (B, 0, 1) cube)
    |> Map.add (B, 1, 0) (Map.get (B, 0, 0) cube)
    |> Map.add (B, 1, 1) (Map.get (B, 1, 0) cube)
    |> Map.add (B, 0, 1) (Map.get (B, 1, 1) cube)
    |> Map.add (R, 1, 0) (Map.get (D, 1, 1) cube)
    |> Map.add (R, 1, 1) (Map.get (D, 0, 1) cube)
    |> Map.add (U, 0, 0) (Map.get (R, 1, 0) cube)
    |> Map.add (U, 1, 0) (Map.get (R, 1, 1) cube)
    |> Map.add (L, 0, 0) (Map.get (U, 1, 0) cube)
    |> Map.add (L, 0, 1) (Map.get (U, 0, 0) cube)
    |> Map.add (D, 0, 1) (Map.get (L, 0, 0) cube)
    |> Map.add (D, 1, 1) (Map.get (L, 0, 1) cube)
  | _ -> cube (* TODO *)
;;

let moves ms cube =
  List.fold_right ~base:cube rotate (List.rev ms)
;;

(** Applying the same rotate four times is a noop. *)
verify (fun m (cube : cube) ->
    (cube |> moves [m; m; m; m])
    = cube
  );;

instance (fun cube ms ->
    List.length ms > 2 &&
    solved (moves ms cube));;
CX.cube;;
