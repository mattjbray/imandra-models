type driver = Lewis | Max

type results =
  { lewis : int
  ; max : int
  ; fastest_lap : driver option
  }


let is_valid r =
  r.lewis > 0 && r.lewis <= 20
  && r.max > 0 && r.max <= 20
  && r.lewis <> r.max


let position driver results =
  match driver with
  | Lewis -> results.lewis
  | Max -> results.max


let points_of_position = function
  | 1 -> 25
  | 2 -> 18
  | 3 -> 15
  | 4 -> 12
  | 5 -> 10
  | 6 -> 8
  | 7 -> 6
  | 8 -> 4
  | 9 -> 2
  | 10 -> 1
  | _ -> 0


let _points_of_position p =
  if p <= 0 then 0
  else if p <= 1 then 25
  else if p <= 2 then 18
  else if p <= 3 then 15
  else if p <= 4 then 12
  else if p <= 5 then 10
  else if p <= 6 then 8
  else if p <= 7 then 6
  else if p <= 8 then 4
  else if p <= 9 then 2
  else if p <= 10 then 1
  else 0


let bonus_point driver results =
  let pos = position driver results in
  if results.fastest_lap = Some driver && pos <= 10 then 1 else 0


let points driver results =
  let pos = (position driver results) in
  points_of_position pos + bonus_point driver results


let championship_winner results =
  if points Lewis results > points Max results then Lewis else Max


module Simp = struct
  let max_wins r =
    r.max < r.lewis
    || (r.max > 10 && r.lewis > 10)
    || (r.lewis = 9 && r.max = 10 && r.fastest_lap = Some Max)


  let championship_winner_simp r = if max_wins r then Max else Lewis

  let championship_winner_equiv r =
    is_valid r ==> championship_winner r = championship_winner_simp r
  [@@imandra_theorem]
end


let loser_wins r =
  let loser = if position Max r < position Lewis r then Lewis else Max in
  is_valid r && championship_winner r = loser


[@@@program]


let d = Modular_decomp.top "championship_winner" ~assuming:"is_valid" ~prune:true

let rs = Modular_decomp.get_regions d
