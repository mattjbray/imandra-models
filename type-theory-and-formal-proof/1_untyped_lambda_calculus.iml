(** Defn 1.3.2 The set Λ of all λ-terms **)
type var = string

type term =
  | Var of var
  | App of term * term
  | Abs of var * term

(** Defn 1.3.5 Multiset of subterms *)
let rec subterms t =
  match t with
  | Var _ -> [t]
  | App (m, n) -> t :: subterms m @ subterms n
  | Abs (_, m) -> t :: subterms m
;;

(** Lemma 1.3.6 *)

(** (1) (Reflexivity) For all λ-terms M, we have M ∈ subterms M*)

lemma subterms_refl m =
  List.mem m (subterms m)
;;

(** (2) (Transitivity) If L ∈ subterms M and M ∈ subterms N, then L ∈ subterms N *)

lemma subterms_trans l m n =
  List.mem l (subterms m) && List.mem m (subterms n)
  ==>
  List.mem l (subterms n)
;;
